const bookLinks = {
    "Œî.E.F.I.R. –§–∞–∑–∞ 1: –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ": "https://againte.gratis/efir",
    "–®–∞–π'—Ä–∏": "https://againte.gratis/shayri",
    "Dev Build: –í–µ—Ä—Å–∏—è 0.0.1": "https://againte.gratis/dev",
    "–° —Ä—É—á–∫–æ–π –ø–æ–Ω–µ–≤–æ–ª–µ": "https://author.today/work/432204",
    "–ê–Ω–¥–æ": "https://author.today/work/428774",
    "GG": "https://againte.gratis/gg/",
    "–õ–∞–Ω—Ü–µ–ª–æ—Ç –õ–µ–ø—ë—à–∫–∏–Ω –∏ —Ç–∞–π–Ω—ã –¢—å–º—É–º–µ—Ä–∏–∏": "https://author.today/work/433674",
    "–ë–∏–æ–∫–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å": "https://author.today/work/428222",
    "–ö–æ–≥–¥–∞ –º–∏—Ä—ã –∑–∞–±—ã–≤–∞—é—Ç –º–æ—ë –∏–º—è": "https://author.today/work/427592",
    "–ü—Ä–æ–ø–∞–≤—à–∏–µ –≤—á–µ—Ä–∞: –ë–æ–ª–æ—Ç–æ": "https://author.today/work/427953",
};

const echoLine = document.getElementById("echo-line");
const errorMessage = document.getElementById("error-message");
const historyLog = document.getElementById("history-log");
const backNav = document.getElementById("back-nav");

let state = 0;
let initialSequenceComplete = false;
let username = "integrant";
let activeTimers = [];
let isLoadingSequence = false;

const ERROR_TYPES = {
    CRITICAL: '#ff0055',
    WARNING: '#ffaa00',
    INFO: '#44aaff'
};

const booksMain = [
    "Œî.E.F.I.R. –§–∞–∑–∞ 1: –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ",
    "–®–∞–π'—Ä–∏",
    "Dev Build: –í–µ—Ä—Å–∏—è 0.0.1",
    "GG",
    "–õ–∞–Ω—Ü–µ–ª–æ—Ç –õ–µ–ø—ë—à–∫–∏–Ω –∏ —Ç–∞–π–Ω—ã –¢—å–º—É–º–µ—Ä–∏–∏",
    "–ë–∏–æ–∫–∏–±–µ—Ä–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å",
    "–ö–æ–≥–¥–∞ –º–∏—Ä—ã –∑–∞–±—ã–≤–∞—é—Ç –º–æ—ë –∏–º—è"
];

const booksCoauthor = [
    "–° —Ä—É—á–∫–æ–π –ø–æ–Ω–µ–≤–æ–ª–µ",
    "–ê–Ω–¥–æ",
    "–ü—Ä–æ–ø–∞–≤—à–∏–µ –≤—á–µ—Ä–∞: –ë–æ–ª–æ—Ç–æ"
];

function escapeHtml(text) {
    return text
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function safeSetTimeout(callback, delay) {
    const timerId = setTimeout(() => {
        const index = activeTimers.indexOf(timerId);
        if (index > -1) {
            activeTimers.splice(index, 1);
        }
        callback();
    }, delay);
    
    activeTimers.push(timerId);
    return timerId;
}

function clearAllTimers() {
    activeTimers.forEach(timerId => clearTimeout(timerId));
    activeTimers = [];
}

function skipLoadingSequence(reason = 'click') {
    if (isLoadingSequence) {
        isLoadingSequence = false;
        clearAllTimers();
        echoLine.style.opacity = 1;
        initialSequenceComplete = true;
        listMenu();
        
        if (reason === 'escape') {
            addToHistory('> –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape');
        } else {
            addToHistory('> –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ –∫–ª–∏–∫—É');
        }
    }
}

function typeMessage(text, callback, speed = 80) {
    clearAllTimers();
    
    echoLine.style.opacity = 1;
    echoLine.textContent = "";
    let index = 0;
    
    function typeChar() {
        if (index < text.length) {
            echoLine.textContent += text.charAt(index);
            index++;
            const randomSpeed = speed + Math.floor(Math.random() * 40 - 20);
            safeSetTimeout(typeChar, randomSpeed);
        } else if (callback) {
            safeSetTimeout(callback, 500);
        }
    }
    
    typeChar();
}

function addToHistory(message, type = 'info') {
    if (!historyLog.style.opacity || historyLog.style.opacity === '0') {
        historyLog.style.opacity = 1;
    }
    
    const timestamp = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit', second: '2-digit' });
    const entryColor = type === 'error' ? '#ff5555' : (type === 'warning' ? '#ffaa00' : '#666');
    
    const logEntry = document.createElement('div');
    logEntry.style.color = entryColor;
    logEntry.innerHTML = `[${timestamp}] ${message}`;
    
    historyLog.appendChild(logEntry);
    historyLog.scrollTop = historyLog.scrollHeight;
}

function openBookLink(bookName) {
    const url = bookLinks[bookName];
    if (url) {
        window.open(url, url.startsWith('https://againte.gratis') ? '_self' : '_blank');
        addToHistory(`> üåê –ø–µ—Ä–µ—Ö–æ–¥: ${bookName} ‚Üí ${url}`);
    } else {
        errorMessage.textContent = `‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
        errorMessage.style.color = ERROR_TYPES.CRITICAL;
        errorMessage.style.opacity = 1;
        addToHistory(`> –ø–æ–ø—ã—Ç–∫–∞: ${bookName} ‚ùå —Å—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'error');

        safeSetTimeout(() => {
            errorMessage.style.opacity = 0;
            safeSetTimeout(() => errorMessage.textContent = "", 300);
        }, 2000);
    }
}

function listSocials() {
    backNav.style.opacity = 1;
    
    let output = "<div class='content-container'><div style='margin-bottom: 10px'><strong># –°–æ—Ü—Å–µ—Ç–∏:</strong></div>";
    output += "<div class='social-item' onclick='showSocialError(\"–í–ö–æ–Ω—Ç–∞–∫—Ç–µ\")'>- –í–ö–æ–Ω—Ç–∞–∫—Ç–µ</div>";
    output += "<div class='social-item' onclick='showSocialError(\"Telegram\")'>- Telegram</div>";
    output += "</div>";
    
    echoLine.innerHTML = output;
    state = 12;
    
    addToHistory('> –æ—Ç–∫—Ä—ã—Ç —Ä–∞–∑–¥–µ–ª: –°–æ—Ü—Å–µ—Ç–∏');
}

function listMenu() {
    let menuHTML = "<div class='menu-container'>[ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ]<br><br>";
    menuHTML += "<div class='menu-item' onclick='listBooks()'>‚Ü≥ [ 1 ] –ö–Ω–∏–≥–∏&nbsp;&nbsp;</div>";
    menuHTML += "<div class='menu-item' onclick='listSocials()'>‚Ü≥ [ 2 ] –°–æ—Ü—Å–µ—Ç–∏</div>";
    menuHTML += "</div>";
    
    echoLine.innerHTML = menuHTML;
    state = 10;
    
    if (initialSequenceComplete) {
        addToHistory('> –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    }
}

function showSocialError(socialName) {
    errorMessage.textContent = `‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞`;
    errorMessage.style.color = ERROR_TYPES.WARNING;
    errorMessage.style.opacity = 1;
    
    addToHistory(`> –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞: ${socialName} ‚ùå –æ—à–∏–±–∫–∞: —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`, 'warning');
    
    safeSetTimeout(() => {
        errorMessage.style.opacity = 0;
        safeSetTimeout(() => {
            errorMessage.textContent = "";
        }, 300);
    }, 2000);
}

function handleBack() {
    if (state === 11 || state === 12) {
        backNav.style.opacity = 0;
        addToHistory('> –≤–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é');
        listMenu();
    }
}

function listBooks() {
    backNav.style.opacity = 1;
    
    let output = "<div class='content-container'><div style='margin-bottom: 10px'><strong># –ö–Ω–∏–≥–∏:</strong></div>";
    
    booksMain.forEach(book => {
        const escapedBook = escapeHtml(book);
        output += `<div class='book-item' onclick='openBookLink("${escapedBook}")'> - ${escapedBook}</div>`;
    });
    
    output += "<div style='margin: 10px 0'><strong># –í —Å–æ–∞–≤—Ç–æ—Ä—Å—Ç–≤–µ —Å –ê–Ω—Ç–æ–Ω –•–æ—Ä—à:</strong></div>";
    
    booksCoauthor.forEach(book => {
        const escapedBook = escapeHtml(book);
        output += `<div class='book-item' onclick='openBookLink("${escapedBook}")'> - ${escapedBook}</div>`;
    });
    
    output += "</div>";
    
    echoLine.innerHTML = output;
    state = 11;
    
    addToHistory('> –æ—Ç–∫—Ä—ã—Ç —Ä–∞–∑–¥–µ–ª: –ö–Ω–∏–≥–∏');
}

function startLoadingSequence() {
    isLoadingSequence = true;
    initialSequenceComplete = true;
    
    typeMessage(">> signal accepted.", () => {
        typeMessage(">> initializing interface...", () => {
            safeSetTimeout(() => {
                typeMessage(">> –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å", () => {
                    safeSetTimeout(() => {
                        typeMessage(`:: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}`, () => {
                            safeSetTimeout(() => {
                                isLoadingSequence = false;
                                listMenu();
                                addToHistory('> —Å–µ—Å—Å–∏—è –Ω–∞—á–∞–ª–∞—Å—å');
                            }, 500);
                        });
                    }, 800);
                });
            }, 1200);
        });
    });
}

function initPage() {
    safeSetTimeout(() => {
        echoLine.style.opacity = 1;
        echoLine.textContent = ":: awaiting signal...";
    }, 1000);
    
    document.body.addEventListener("click", () => {
        if (state === 0 && !initialSequenceComplete) {
            startLoadingSequence();
        } else if (isLoadingSequence) {
            skipLoadingSequence('click');
        }
    });
    
    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && (state === 11 || state === 12)) {
            handleBack();
        }
        
        if (state === 10) {
            if (event.key === '1') {
                listBooks();
            } else if (event.key === '2') {
                listSocials();
            }
        }
        
        if (event.key === 'Backspace' && (state === 11 || state === 12)) {
            handleBack();
            event.preventDefault();
        }
        
        if (isLoadingSequence && event.key === 'Escape') {
            skipLoadingSequence('escape');
            event.preventDefault();
        }
    });
    
    window.addEventListener('beforeunload', () => {
        clearAllTimers();
    });
}

window.listBooks = listBooks;
window.listSocials = listSocials;
window.handleBack = handleBack;
window.openBookLink = openBookLink;
window.showSocialError = showSocialError;

document.addEventListener('DOMContentLoaded', initPage);

if (document.readyState === 'interactive' || document.readyState === 'complete') {
    initPage();
}
